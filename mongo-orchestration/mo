#!/bin/bash
# Copyright 2012-2014 MongoDB, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

function eval_params {
    local params=$(sed -e 's|["]|\\\"|g' $1)
    echo $(eval echo \"$params\")
}

function r {
    echo $1| awk -F'/' '{print $(NF-1)}'| sed 's/standalone/servers/'
}

function a {
    echo $(cd $(dirname $1); pwd)/$(basename $1)
}

function id {
    local id_line=$(grep id $1 | head -n 1)
    echo $(expr "$id_line" : '.*: *"\(.*\)" *,*')
}

function url {
    echo $(echo "$1" | tail -n 1 | php -r 'echo json_decode(file_get_contents("php://stdin"))->mongodb_uri;')
}

function get {
    echo "GET $1 $(curl --header 'Accept: application/json' --include --silent --request GET $1)"
}

function post {
    echo "POST $1 $(curl --header 'Accept: application/json' --include --silent --request POST --data "$2" $1)"
}

function delete {
    echo "DELETE $1 $(curl --header 'Accept: application/json' --include --silent --request DELETE $1)"
}

function code {
   expr "$1" : '.*HTTP/1.[01] \([0-9]*\)'
}

function usage {
    echo "usage: $0 <topology>/<configuration>.json action"
    echo "topology: standalone|replica_sets|sharded_clusters"
    echo "action: start|status|stop|url"
    exit 1
}

SSL_FILES=$(a ./ssl-files)
BASE_URL=${MONGO_ORCHESTRATION:-'http://localhost:8889'}
WORKSPACE=/tmp/orchestrations

# Determine base directory. First, navigate to the current directory, then do some magic
cd "$(dirname "${BASH_SOURCE}")";
BASE_DIR="$( cd "$( dirname $(readlink ${BASH_SOURCE[0]}) )" >/dev/null 2>&1 && pwd )"
CONFIGURATION_DIR="$BASE_DIR/configurations"

if [ ! -d "$WORKSPACE" ]; then mkdir -p "$WORKSPACE"; fi
if [ $# -ne 2 ]; then usage; fi
if [ ! -f "$CONFIGURATION_DIR/$1" ]; then echo "configuration file '$CONFIGURATION_DIR/$1' not found"; exit 1; fi

ID=$(id $CONFIGURATION_DIR/$1)
if [ ! "$ID" ]; then echo "id field not found in configuration file '$CONFIGURATION_DIR/$1'"; exit 1; fi
R=$(r $1)

GET=$(get $BASE_URL/$R/$ID)
HTTP_CODE=$(code "$GET")
EXIT_CODE=0

case $2 in
start)
    if [ "$HTTP_CODE" != "200" ]
    then
        LOGPATH=$WORKSPACE
        DBPATH=$WORKSPACE
        POST_DATA=$(eval_params $CONFIGURATION_DIR/$1)
        POST=$(post $BASE_URL/$R "$POST_DATA")

        HTTP_CODE=$(code "$POST")
        if [ "$HTTP_CODE" != 200 ]
        then
            echo "Could not start server with configuration $R/$ID. Response below"
            echo $POST
            EXIT_CODE=1;
        else
            echo "Started configuration $R/$ID, connect using $(url "$POST")"
        fi
    else
        echo "Configuration $R/$ID already running! Connect using $(url "$GET")"
    fi
    ;;
stop)
    if [ "$HTTP_CODE" == "200" ]
    then
        DELETE=$(delete $BASE_URL/$R/$ID)
        HTTP_CODE=$(code "$DELETE")
        if [ "$HTTP_CODE" != 204 ]
        then
            echo "Could not stop configuration $R/$ID. Response below"
            echo $DELETE
            EXIT_CODE=1
        else
            echo "Configuration $R/$ID stopped successfully."
        fi
    else
        echo "Configuration $R/$ID is not running!"
    fi
    ;;
status)
    if [ "$HTTP_CODE" == "200" ]
    then
        echo "Configuration $R/$ID is running, connect using $(url "$GET")"
    else
        echo "Configuration $R/$ID is not running"
        EXIT_CODE=1
    fi
    ;;
url)
    if [ "$HTTP_CODE" == "200" ]
    then
        echo $(url "$GET")
    else
        EXIT_CODE=1
    fi
    ;;
*)
    usage
    ;;
esac
exit $EXIT_CODE
