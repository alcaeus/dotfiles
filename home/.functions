# Create a new directory and enter it
function mkd() {
	mkdir -p "$@" && cd "$@";
}

# Create a .tar.gz archive, using `zopfli`, `pigz` or `gzip` for compression
function targz() {
	local tmpFile="${@%/}.tar";
	tar -cvf "${tmpFile}" --exclude=".DS_Store" "${@}" || return 1;

	size=$(
		stat -f"%z" "${tmpFile}" 2> /dev/null; # OS X `stat`
		stat -c"%s" "${tmpFile}" 2> /dev/null # GNU `stat`
	);

	local cmd="";
	if (( size < 52428800 )) && hash zopfli 2> /dev/null; then
		# the .tar file is smaller than 50 MB and Zopfli is available; use it
		cmd="zopfli";
	else
		if hash pigz 2> /dev/null; then
			cmd="pigz";
		else
			cmd="gzip";
		fi;
	fi;

	echo "Compressing .tar using \`${cmd}\`…";
	"${cmd}" -v "${tmpFile}" || return 1;
	[ -f "${tmpFile}" ] && rm "${tmpFile}";
	echo "${tmpFile}.gz created successfully.";
}

# Determine size of a file or total size of a directory
function fs() {
	if du -b /dev/null > /dev/null 2>&1; then
		local arg=-sbh;
	else
		local arg=-sh;
	fi
	if [[ -n "$@" ]]; then
		du $arg -- "$@";
	else
		du $arg .[^.]* *;
	fi;
}

# Use Git’s colored diff when available
hash git &>/dev/null;
if [ $? -eq 0 ]; then
	function diff() {
		git diff --no-index --color-words "$@";
	}
fi;

# Create a data URL from a file
function dataurl() {
	local mimeType=$(file -b --mime-type "$1");
	if [[ $mimeType == text/* ]]; then
		mimeType="${mimeType};charset=utf-8";
	fi
	echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')";
}

# Create a git.io short URL
function gitio() {
	if [ -z "${1}" -o -z "${2}" ]; then
		echo "Usage: \`gitio slug url\`";
		return 1;
	fi;
	curl -i http://git.io/ -F "url=${2}" -F "code=${1}";
}

# `a` with no arguments opens the current directory in Atom Editor, otherwise
# opens the given location
function a() {
	if [ $# -eq 0 ]; then
		atom .;
	else
		atom "$@";
	fi;
}

# `v` with no arguments opens the current directory in Vim, otherwise opens the
# given location
function v() {
	if [ $# -eq 0 ]; then
		vim .;
	else
		vim "$@";
	fi;
}

# `o` with no arguments opens the current directory, otherwise opens the given
# location
function o() {
	if [ $# -eq 0 ]; then
		open .;
	else
		open "$@";
	fi;
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
function tre() {
	tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX;
}

# `keychain-import-pkcs12` extracts key and certificate from a PKCS12 container
# and imports them into the keychain. This is provided since Keychain access
# doesn't allow pasting the passphrase
function keychain-import-pkcs12 () {
	openssl pkcs12 -in $1 -nocerts -nodes -out /tmp/private.key
	openssl pkcs12 -in $1 -clcerts -nokeys -out /tmp/public.crt
	security import /tmp/public.crt -t pub -k login.keychain
	security import /tmp/private.key -t priv -k login.keychain
	rm /tmp/private.key /tmp/public.crt
}

# `make-pkcs12` takes a key and certificate and creates a pkcs12 container
function make-pkcs12 () {
	if [ $# -eq 1 ]; then
		PKEY="$1.key";
		CERT="$1.crt";
		OUT="$1.p12";
		NAME=$1;
	elif [ $#-eq 4 ]; then
		NAME=$1;
		CERT=$2;
		PKEY=$3;
		OUT=$4;
	else
		echo "Usage: make-pkcs12 <name> <certificate-file> <private-key-file> <output-file>";
		echo "Usage: make-pkcs12 <name>";
		echo "The second form assumes the files <name>.crt and <name>.key to be present";
		return 1;
	fi;

	openssl pkcs12 -export -clcerts -inkey $PKEY -in $CERT -out $OUT -name $NAME
}

# `gpg-sign-key` signs a key, exports and encrypts the signature
function gpg-sign-key () {
	if [ $# -ne 1 ]; then
		echo "Usage: sign-key <key>";
		return 1;
	fi;

	gpg --sign-key --ask-cert-level "$1"
	gpg -a --export "$1" | gpg -a -e -r "$1" -o "$1_signed.asc"
}

# Switch to a specific php version
function usephp () {
	brew list | grep "^php\d*$" | xargs brew unlink 
	brew link php$1
}

# "Alias" to resolve an existing alias
function resolve () {
	alias | grep "alias $1="
}
